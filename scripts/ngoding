#!/usr/bin/env node
/**
  * This tools start with
  * - read `icon.yml`
  * - clone repository that defined from `icon.yml`
  * - generate all of `svg` after clone repository
  * - publish to npm on one packages called `chakra-icons`
  * - done
  */
"use strict";
const promisify = require('util').promisify
const fs = require('fs/promises');
const path = require('path');
const yaml = require('js-yaml');
const gittar = require('@ri7nz/gittar');
const create = require('create-chakra-icons/cli').main;
const glob = promisify(require('glob').glob)
const pascalCase = require('change-case').pascalCase
/**
 * @typedef {Object} Icon
 * @property {string} name
 * @property {string} repository
 * @property {string} svgPath
 * @property {string?} tarPath
 * @property {string?} untarPath
 * @property {string?} sourcePath
 * @property {string?} outputPath
 */

/**
 * @param {Icon} icon
 * @return {Promise<Icon>}
 */
const fetchRepository = async (/** @type Icon */ icon) => {
  const tarPath = await gittar.fetch(icon.repository)
  const untarPath = path.join('data', icon.name)
  await gittar.extract(tarPath, untarPath)
  return {
    ...icon,
    tarPath,
    untarPath
  }
}


const createIcons = async (/** @type Promise<Icon> */ icon) => {
  icon = await icon
  const input = path.join("data", icon.name, icon.svgPath)
  const inputs = await glob(`${input}/**/*.svg`)

  inputs.forEach(async i => {
    const [fname] = path.basename(i).split('.')
    const n = pascalCase(fname)

    const basepath = i.split('/').slice(0, -1).join('/').replace('data', 'dist').replace(icon.svgPath, '')

    await fs.mkdir(basepath, { recursive: true })

    const o = path.join(basepath, `${n}.js`)

    create({
      n,
      i,
      o
    })
  })


  return icon
}

async function run() {
  /** @type IconYML */
  const { icons = [] } = yaml.load(await fs.readFile(path.resolve('icons.yml')));

  const tasks = icons
    .map((/** @type Icon */icon) => fetchRepository(icon))
    .map((/** @type Promise<Icon> */icon) => createIcons(icon))

  return Promise.all(tasks)
}

run()
